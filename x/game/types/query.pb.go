// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryWhitelistedContractsRequest struct {
}

func (m *QueryWhitelistedContractsRequest) Reset()         { *m = QueryWhitelistedContractsRequest{} }
func (m *QueryWhitelistedContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedContractsRequest) ProtoMessage()    {}
func (*QueryWhitelistedContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{2}
}
func (m *QueryWhitelistedContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedContractsRequest.Merge(m, src)
}
func (m *QueryWhitelistedContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedContractsRequest proto.InternalMessageInfo

type QueryWhitelistedContractsResponse struct {
	Contracts []string `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (m *QueryWhitelistedContractsResponse) Reset()         { *m = QueryWhitelistedContractsResponse{} }
func (m *QueryWhitelistedContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedContractsResponse) ProtoMessage()    {}
func (*QueryWhitelistedContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{3}
}
func (m *QueryWhitelistedContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedContractsResponse.Merge(m, src)
}
func (m *QueryWhitelistedContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedContractsResponse proto.InternalMessageInfo

func (m *QueryWhitelistedContractsResponse) GetContracts() []string {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type QueryInGameNftsRequest struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (m *QueryInGameNftsRequest) Reset()         { *m = QueryInGameNftsRequest{} }
func (m *QueryInGameNftsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInGameNftsRequest) ProtoMessage()    {}
func (*QueryInGameNftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{4}
}
func (m *QueryInGameNftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInGameNftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInGameNftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInGameNftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInGameNftsRequest.Merge(m, src)
}
func (m *QueryInGameNftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInGameNftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInGameNftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInGameNftsRequest proto.InternalMessageInfo

func (m *QueryInGameNftsRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

type QueryInGameNftsResponse struct {
	TokenIds []uint64 `protobuf:"varint,1,rep,packed,name=token_ids,json=tokenIds,proto3" json:"token_ids,omitempty"`
}

func (m *QueryInGameNftsResponse) Reset()         { *m = QueryInGameNftsResponse{} }
func (m *QueryInGameNftsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInGameNftsResponse) ProtoMessage()    {}
func (*QueryInGameNftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{5}
}
func (m *QueryInGameNftsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInGameNftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInGameNftsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInGameNftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInGameNftsResponse.Merge(m, src)
}
func (m *QueryInGameNftsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInGameNftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInGameNftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInGameNftsResponse proto.InternalMessageInfo

func (m *QueryInGameNftsResponse) GetTokenIds() []uint64 {
	if m != nil {
		return m.TokenIds
	}
	return nil
}

type QueryDepositBalanceRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDepositBalanceRequest) Reset()         { *m = QueryDepositBalanceRequest{} }
func (m *QueryDepositBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositBalanceRequest) ProtoMessage()    {}
func (*QueryDepositBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{6}
}
func (m *QueryDepositBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositBalanceRequest.Merge(m, src)
}
func (m *QueryDepositBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositBalanceRequest proto.InternalMessageInfo

func (m *QueryDepositBalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryDepositBalanceResponse struct {
	Deposit Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
}

func (m *QueryDepositBalanceResponse) Reset()         { *m = QueryDepositBalanceResponse{} }
func (m *QueryDepositBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositBalanceResponse) ProtoMessage()    {}
func (*QueryDepositBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{7}
}
func (m *QueryDepositBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositBalanceResponse.Merge(m, src)
}
func (m *QueryDepositBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositBalanceResponse proto.InternalMessageInfo

func (m *QueryDepositBalanceResponse) GetDeposit() Deposit {
	if m != nil {
		return m.Deposit
	}
	return Deposit{}
}

type QueryAllDepositBalancesRequest struct {
}

func (m *QueryAllDepositBalancesRequest) Reset()         { *m = QueryAllDepositBalancesRequest{} }
func (m *QueryAllDepositBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositBalancesRequest) ProtoMessage()    {}
func (*QueryAllDepositBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{8}
}
func (m *QueryAllDepositBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositBalancesRequest.Merge(m, src)
}
func (m *QueryAllDepositBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositBalancesRequest proto.InternalMessageInfo

type QueryAllDepositBalanceResponse struct {
	Deposits []Deposit  `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	Amount   types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryAllDepositBalanceResponse) Reset()         { *m = QueryAllDepositBalanceResponse{} }
func (m *QueryAllDepositBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositBalanceResponse) ProtoMessage()    {}
func (*QueryAllDepositBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{9}
}
func (m *QueryAllDepositBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositBalanceResponse.Merge(m, src)
}
func (m *QueryAllDepositBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositBalanceResponse proto.InternalMessageInfo

func (m *QueryAllDepositBalanceResponse) GetDeposits() []Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryAllDepositBalanceResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmichorizon.coho.game.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmichorizon.coho.game.QueryParamsResponse")
	proto.RegisterType((*QueryWhitelistedContractsRequest)(nil), "cosmichorizon.coho.game.QueryWhitelistedContractsRequest")
	proto.RegisterType((*QueryWhitelistedContractsResponse)(nil), "cosmichorizon.coho.game.QueryWhitelistedContractsResponse")
	proto.RegisterType((*QueryInGameNftsRequest)(nil), "cosmichorizon.coho.game.QueryInGameNftsRequest")
	proto.RegisterType((*QueryInGameNftsResponse)(nil), "cosmichorizon.coho.game.QueryInGameNftsResponse")
	proto.RegisterType((*QueryDepositBalanceRequest)(nil), "cosmichorizon.coho.game.QueryDepositBalanceRequest")
	proto.RegisterType((*QueryDepositBalanceResponse)(nil), "cosmichorizon.coho.game.QueryDepositBalanceResponse")
	proto.RegisterType((*QueryAllDepositBalancesRequest)(nil), "cosmichorizon.coho.game.QueryAllDepositBalancesRequest")
	proto.RegisterType((*QueryAllDepositBalanceResponse)(nil), "cosmichorizon.coho.game.QueryAllDepositBalanceResponse")
}

func init() { proto.RegisterFile("game/query.proto", fileDescriptor_ba210adeee9ee5e5) }

var fileDescriptor_ba210adeee9ee5e5 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x4f, 0x13, 0x4d,
	0x18, 0xef, 0xf2, 0xf2, 0x16, 0x3a, 0x26, 0x2a, 0x23, 0x91, 0xba, 0x90, 0xa5, 0xec, 0x45, 0x22,
	0xb2, 0x03, 0x05, 0x41, 0x49, 0x4c, 0xa4, 0x68, 0x0c, 0x17, 0xa3, 0x8d, 0x89, 0x89, 0x97, 0xcd,
	0x74, 0x3b, 0x6c, 0x27, 0x6e, 0x67, 0x96, 0xce, 0x54, 0x45, 0xc2, 0x45, 0xaf, 0x1e, 0x4c, 0x3c,
	0xfb, 0x01, 0xfc, 0x04, 0x5e, 0xbc, 0x9a, 0x70, 0x24, 0xf1, 0xe2, 0xc9, 0x18, 0xf0, 0x83, 0x98,
	0x9d, 0x99, 0x5d, 0xa8, 0x65, 0x1b, 0xf0, 0xd2, 0x76, 0x67, 0x7f, 0xff, 0x9e, 0xc9, 0xef, 0x49,
	0xc1, 0xe5, 0x10, 0xb7, 0x09, 0xda, 0xee, 0x92, 0xce, 0x8e, 0x17, 0x77, 0xb8, 0xe4, 0x70, 0x22,
	0xe0, 0xa2, 0x4d, 0x83, 0x16, 0xef, 0xd0, 0x37, 0x9c, 0x79, 0x01, 0x6f, 0x71, 0x2f, 0x01, 0xd9,
	0xe3, 0x21, 0x0f, 0xb9, 0xc2, 0xa0, 0xe4, 0x97, 0x86, 0xdb, 0x53, 0x21, 0xe7, 0x61, 0x44, 0x10,
	0x8e, 0x29, 0xc2, 0x8c, 0x71, 0x89, 0x25, 0xe5, 0x4c, 0x98, 0xb7, 0x37, 0x12, 0x31, 0x2e, 0x50,
	0x03, 0x0b, 0xe3, 0x82, 0x5e, 0x2e, 0x36, 0x88, 0xc4, 0x8b, 0x28, 0xc6, 0x21, 0x65, 0x0a, 0x6c,
	0xb0, 0x63, 0x2a, 0x4a, 0x8c, 0x3b, 0xb8, 0x9d, 0xd2, 0x2f, 0xa9, 0xa3, 0xe4, 0xc3, 0x1c, 0x38,
	0x27, 0xf5, 0x52, 0xa5, 0x80, 0x53, 0xa3, 0xe1, 0x8e, 0x03, 0xf8, 0x24, 0x71, 0x79, 0xac, 0x54,
	0xea, 0x64, 0xbb, 0x4b, 0x84, 0x74, 0x9f, 0x82, 0x2b, 0x3d, 0xa7, 0x22, 0xe6, 0x4c, 0x10, 0x78,
	0x17, 0x14, 0xb5, 0x5b, 0xd9, 0xaa, 0x58, 0xb3, 0x17, 0xaa, 0xd3, 0x5e, 0xce, 0xe8, 0x9e, 0x26,
	0xd6, 0x86, 0xf7, 0x7f, 0x4e, 0x17, 0xea, 0x86, 0xe4, 0xba, 0xa0, 0xa2, 0x54, 0x9f, 0xb5, 0xa8,
	0x24, 0x11, 0x15, 0x92, 0x34, 0x37, 0x38, 0x93, 0x1d, 0x1c, 0xc8, 0xcc, 0x79, 0x1d, 0xcc, 0x0c,
	0xc0, 0x98, 0x1c, 0x53, 0xa0, 0x14, 0xa4, 0x87, 0x65, 0xab, 0xf2, 0xdf, 0x6c, 0xa9, 0x7e, 0x7c,
	0xe0, 0x2e, 0x83, 0xab, 0x4a, 0x62, 0x93, 0x3d, 0xc4, 0x6d, 0xf2, 0x68, 0x2b, 0x13, 0x87, 0x36,
	0x18, 0x4d, 0x61, 0x6a, 0x82, 0x52, 0x3d, 0x7b, 0x76, 0x57, 0xc0, 0x44, 0x1f, 0xcb, 0xd8, 0x4d,
	0x82, 0x92, 0xe4, 0x2f, 0x08, 0xf3, 0x69, 0x53, 0xdb, 0x0d, 0xd7, 0x47, 0xd5, 0xc1, 0x66, 0x53,
	0xb8, 0x2b, 0xc0, 0x56, 0xbc, 0xfb, 0x24, 0xe6, 0x82, 0xca, 0x1a, 0x8e, 0x30, 0x0b, 0x48, 0xea,
	0x58, 0x06, 0x23, 0xb8, 0xd9, 0xec, 0x10, 0x21, 0x8c, 0x61, 0xfa, 0xe8, 0xfa, 0x60, 0xf2, 0x54,
	0x9e, 0xf1, 0xbc, 0x07, 0x46, 0x9a, 0xfa, 0x8d, 0xb9, 0xeb, 0x4a, 0xee, 0x5d, 0xa7, 0x0a, 0xfa,
	0xb2, 0x53, 0x9a, 0x5b, 0x01, 0x8e, 0x32, 0x58, 0x8f, 0xa2, 0x5e, 0x8f, 0xec, 0xae, 0x3f, 0x59,
	0x79, 0x90, 0x2c, 0x46, 0x0d, 0x8c, 0x1a, 0x3d, 0x3d, 0xf9, 0xd9, 0x73, 0x64, 0x3c, 0xb8, 0x0a,
	0x8a, 0xb8, 0xcd, 0xbb, 0x4c, 0x96, 0x87, 0xd4, 0x24, 0xd7, 0x3c, 0xdd, 0x49, 0x2f, 0xe9, 0xa4,
	0x67, 0x3a, 0xe9, 0x6d, 0x70, 0xca, 0xd2, 0xbe, 0x68, 0x78, 0xf5, 0xdd, 0x08, 0xf8, 0x5f, 0xe5,
	0x83, 0xef, 0x2d, 0x50, 0xd4, 0x95, 0x82, 0x73, 0xb9, 0xfe, 0xfd, 0x3d, 0xb6, 0x6f, 0x9e, 0x0d,
	0xac, 0x87, 0x75, 0xaf, 0xbf, 0xfd, 0xfe, 0xfb, 0xe3, 0xd0, 0x0c, 0x9c, 0x46, 0x3d, 0x2c, 0x94,
	0xb0, 0xd0, 0x89, 0x5d, 0x83, 0xdf, 0x2c, 0x30, 0x7e, 0x5a, 0x41, 0xe1, 0x9d, 0xc1, 0x7e, 0x03,
	0x8a, 0x6f, 0xaf, 0xfd, 0x0b, 0xd5, 0x04, 0x5f, 0x51, 0xc1, 0x17, 0xa0, 0x97, 0x1b, 0xfc, 0xd5,
	0x31, 0xdd, 0xcf, 0x36, 0x05, 0x7e, 0xb6, 0x00, 0x38, 0xee, 0x3b, 0x44, 0x83, 0x23, 0xf4, 0xed,
	0x93, 0xbd, 0x70, 0x76, 0x82, 0x49, 0x7a, 0x5b, 0x25, 0xad, 0xc2, 0x85, 0xdc, 0xa4, 0x94, 0xf9,
	0xc9, 0xb7, 0xcf, 0xb6, 0xa4, 0x40, 0xbb, 0x69, 0xd6, 0x3d, 0xf8, 0xc5, 0x02, 0x17, 0x7b, 0x4b,
	0x0a, 0x97, 0x06, 0xdb, 0x9f, 0xba, 0x91, 0xf6, 0xf2, 0xf9, 0x48, 0x26, 0xf7, 0x9a, 0xca, 0xbd,
	0x0c, 0xab, 0xb9, 0xb9, 0x4d, 0xdd, 0xfd, 0x86, 0x66, 0xa2, 0x5d, 0xb3, 0xe8, 0x7b, 0xf0, 0xab,
	0x05, 0xc6, 0xfa, 0x36, 0x0c, 0xae, 0x0e, 0xce, 0x91, 0xbb, 0xb5, 0xf6, 0x79, 0x89, 0xd9, 0x0c,
	0xb7, 0xd4, 0x0c, 0x08, 0xce, 0xe7, 0xce, 0x80, 0xa3, 0xc8, 0xff, 0x6b, 0x0e, 0x51, 0x7b, 0xb0,
	0x7f, 0xe8, 0x58, 0x07, 0x87, 0x8e, 0xf5, 0xeb, 0xd0, 0xb1, 0x3e, 0x1c, 0x39, 0x85, 0x83, 0x23,
	0xa7, 0xf0, 0xe3, 0xc8, 0x29, 0x3c, 0x9f, 0x0b, 0xa9, 0x6c, 0x75, 0x1b, 0x5e, 0xc0, 0xdb, 0x46,
	0x72, 0xbe, 0x47, 0xf3, 0xb5, 0x56, 0x95, 0x3b, 0x31, 0x11, 0x8d, 0xa2, 0xfa, 0xbf, 0x59, 0xfa,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x78, 0x30, 0xe6, 0xf2, 0x40, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	WhitelistedContracts(ctx context.Context, in *QueryWhitelistedContractsRequest, opts ...grpc.CallOption) (*QueryWhitelistedContractsResponse, error)
	InGameNfts(ctx context.Context, in *QueryInGameNftsRequest, opts ...grpc.CallOption) (*QueryInGameNftsResponse, error)
	DepositBalance(ctx context.Context, in *QueryDepositBalanceRequest, opts ...grpc.CallOption) (*QueryDepositBalanceResponse, error)
	AllDepositBalance(ctx context.Context, in *QueryAllDepositBalancesRequest, opts ...grpc.CallOption) (*QueryAllDepositBalanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.coho.game.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhitelistedContracts(ctx context.Context, in *QueryWhitelistedContractsRequest, opts ...grpc.CallOption) (*QueryWhitelistedContractsResponse, error) {
	out := new(QueryWhitelistedContractsResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.coho.game.Query/WhitelistedContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InGameNfts(ctx context.Context, in *QueryInGameNftsRequest, opts ...grpc.CallOption) (*QueryInGameNftsResponse, error) {
	out := new(QueryInGameNftsResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.coho.game.Query/InGameNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositBalance(ctx context.Context, in *QueryDepositBalanceRequest, opts ...grpc.CallOption) (*QueryDepositBalanceResponse, error) {
	out := new(QueryDepositBalanceResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.coho.game.Query/DepositBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDepositBalance(ctx context.Context, in *QueryAllDepositBalancesRequest, opts ...grpc.CallOption) (*QueryAllDepositBalanceResponse, error) {
	out := new(QueryAllDepositBalanceResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.coho.game.Query/AllDepositBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	WhitelistedContracts(context.Context, *QueryWhitelistedContractsRequest) (*QueryWhitelistedContractsResponse, error)
	InGameNfts(context.Context, *QueryInGameNftsRequest) (*QueryInGameNftsResponse, error)
	DepositBalance(context.Context, *QueryDepositBalanceRequest) (*QueryDepositBalanceResponse, error)
	AllDepositBalance(context.Context, *QueryAllDepositBalancesRequest) (*QueryAllDepositBalanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) WhitelistedContracts(ctx context.Context, req *QueryWhitelistedContractsRequest) (*QueryWhitelistedContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedContracts not implemented")
}
func (*UnimplementedQueryServer) InGameNfts(ctx context.Context, req *QueryInGameNftsRequest) (*QueryInGameNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InGameNfts not implemented")
}
func (*UnimplementedQueryServer) DepositBalance(ctx context.Context, req *QueryDepositBalanceRequest) (*QueryDepositBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositBalance not implemented")
}
func (*UnimplementedQueryServer) AllDepositBalance(ctx context.Context, req *QueryAllDepositBalancesRequest) (*QueryAllDepositBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDepositBalance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.coho.game.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhitelistedContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhitelistedContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.coho.game.Query/WhitelistedContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhitelistedContracts(ctx, req.(*QueryWhitelistedContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InGameNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInGameNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InGameNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.coho.game.Query/InGameNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InGameNfts(ctx, req.(*QueryInGameNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.coho.game.Query/DepositBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositBalance(ctx, req.(*QueryDepositBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDepositBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDepositBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.coho.game.Query/AllDepositBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDepositBalance(ctx, req.(*QueryAllDepositBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmichorizon.coho.game.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "WhitelistedContracts",
			Handler:    _Query_WhitelistedContracts_Handler,
		},
		{
			MethodName: "InGameNfts",
			Handler:    _Query_InGameNfts_Handler,
		},
		{
			MethodName: "DepositBalance",
			Handler:    _Query_DepositBalance_Handler,
		},
		{
			MethodName: "AllDepositBalance",
			Handler:    _Query_AllDepositBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contracts[iNdEx])
			copy(dAtA[i:], m.Contracts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Contracts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInGameNftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInGameNftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInGameNftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInGameNftsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInGameNftsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInGameNftsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenIds) > 0 {
		dAtA3 := make([]byte, len(m.TokenIds)*10)
		var j2 int
		for _, num := range m.TokenIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWhitelistedContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhitelistedContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, s := range m.Contracts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInGameNftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInGameNftsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenIds) > 0 {
		l = 0
		for _, e := range m.TokenIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryDepositBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDepositBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDepositBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInGameNftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInGameNftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInGameNftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInGameNftsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInGameNftsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInGameNftsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TokenIds = append(m.TokenIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TokenIds) == 0 {
					m.TokenIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TokenIds = append(m.TokenIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
