// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/liquidity.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Liquidity struct {
	Amounts []types.Coin `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts"`
}

func (m *Liquidity) Reset()         { *m = Liquidity{} }
func (m *Liquidity) String() string { return proto.CompactTextString(m) }
func (*Liquidity) ProtoMessage()    {}
func (*Liquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a7089c3c555ee8c, []int{0}
}
func (m *Liquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liquidity.Merge(m, src)
}
func (m *Liquidity) XXX_Size() int {
	return m.Size()
}
func (m *Liquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_Liquidity.DiscardUnknown(m)
}

var xxx_messageInfo_Liquidity proto.InternalMessageInfo

func (m *Liquidity) GetAmounts() []types.Coin {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Liquidity)(nil), "cosmichorizon.coho.game.Liquidity")
}

func init() { proto.RegisterFile("game/liquidity.proto", fileDescriptor_4a7089c3c555ee8c) }

var fileDescriptor_4a7089c3c555ee8c = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x13, 0x81, 0x40, 0x84, 0xad, 0xaa, 0x04, 0x74, 0x70, 0x11, 0x13, 0x12, 0xc2, 0xa7,
	0xc2, 0xc4, 0x5a, 0x04, 0x13, 0x13, 0x23, 0x9b, 0xe3, 0x1a, 0xe7, 0xa4, 0x3a, 0x17, 0xe2, 0x33,
	0xa2, 0x7c, 0x0a, 0x3e, 0x56, 0xc7, 0x8e, 0x4c, 0x08, 0x25, 0x5f, 0x04, 0x39, 0x7f, 0x16, 0xb6,
	0x77, 0xf7, 0xde, 0x49, 0xbf, 0x77, 0xd9, 0xd4, 0x2a, 0x67, 0x60, 0x8d, 0x6f, 0x01, 0x57, 0xc8,
	0x1b, 0x59, 0xd5, 0xc4, 0x34, 0x39, 0xd1, 0xe4, 0x1d, 0xea, 0x82, 0x6a, 0xfc, 0xa4, 0x52, 0x6a,
	0x2a, 0x48, 0xc6, 0xe0, 0x4c, 0x44, 0x83, 0x3c, 0xe4, 0xca, 0x1b, 0x78, 0x5f, 0xe4, 0x86, 0xd5,
	0x02, 0x34, 0x61, 0xd9, 0x1f, 0xce, 0x84, 0x25, 0xb2, 0x6b, 0x03, 0xdd, 0x94, 0x87, 0x57, 0x58,
	0x85, 0x5a, 0x31, 0xd2, 0xe8, 0xcf, 0xff, 0xfb, 0x8c, 0xce, 0x78, 0x56, 0xae, 0x1a, 0x02, 0x53,
	0x4b, 0x96, 0x3a, 0x09, 0x51, 0xf5, 0xdb, 0x8b, 0xc7, 0xec, 0xe8, 0x69, 0x44, 0x9c, 0xdc, 0x65,
	0x87, 0xca, 0x51, 0x28, 0xd9, 0x9f, 0xa6, 0xe7, 0x7b, 0x97, 0xc7, 0x37, 0x67, 0xb2, 0xa7, 0x92,
	0x91, 0x4a, 0x0e, 0x54, 0xf2, 0x9e, 0xb0, 0x5c, 0xee, 0x6f, 0x7f, 0xe6, 0xc9, 0xf3, 0x98, 0x5f,
	0x3e, 0x6c, 0x1b, 0x91, 0xee, 0x1a, 0x91, 0xfe, 0x36, 0x22, 0xfd, 0x6a, 0x45, 0xb2, 0x6b, 0x45,
	0xf2, 0xdd, 0x8a, 0xe4, 0xe5, 0xca, 0x22, 0x17, 0x21, 0x97, 0x9a, 0x1c, 0xf4, 0xe5, 0xaf, 0x87,
	0xf6, 0x10, 0xdb, 0xc3, 0x07, 0x74, 0x8f, 0xe2, 0x4d, 0x65, 0x7c, 0x7e, 0xd0, 0x51, 0xdd, 0xfe,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xce, 0xba, 0x7f, 0x3d, 0x01, 0x00, 0x00,
}

func (m *Liquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Liquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	return n
}

func sovLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidity(x uint64) (n int) {
	return sovLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Liquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidity = fmt.Errorf("proto: unexpected end of group")
)
