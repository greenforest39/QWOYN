// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmichorizon/qwoyn/aquifer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmic_horizon_qwoyn_osmosis_balancer "github.com/cosmic-horizon/qwoyn/osmosis/balancer"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPutAllocationToken struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgPutAllocationToken) Reset()         { *m = MsgPutAllocationToken{} }
func (m *MsgPutAllocationToken) String() string { return proto.CompactTextString(m) }
func (*MsgPutAllocationToken) ProtoMessage()    {}
func (*MsgPutAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{0}
}
func (m *MsgPutAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutAllocationToken.Merge(m, src)
}
func (m *MsgPutAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutAllocationToken proto.InternalMessageInfo

func (m *MsgPutAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPutAllocationToken) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgPutAllocationTokenResponse struct {
}

func (m *MsgPutAllocationTokenResponse) Reset()         { *m = MsgPutAllocationTokenResponse{} }
func (m *MsgPutAllocationTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPutAllocationTokenResponse) ProtoMessage()    {}
func (*MsgPutAllocationTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{1}
}
func (m *MsgPutAllocationTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutAllocationTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutAllocationTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutAllocationTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutAllocationTokenResponse.Merge(m, src)
}
func (m *MsgPutAllocationTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutAllocationTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutAllocationTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutAllocationTokenResponse proto.InternalMessageInfo

type MsgTakeOutAllocationToken struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgTakeOutAllocationToken) Reset()         { *m = MsgTakeOutAllocationToken{} }
func (m *MsgTakeOutAllocationToken) String() string { return proto.CompactTextString(m) }
func (*MsgTakeOutAllocationToken) ProtoMessage()    {}
func (*MsgTakeOutAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{2}
}
func (m *MsgTakeOutAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTakeOutAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTakeOutAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTakeOutAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTakeOutAllocationToken.Merge(m, src)
}
func (m *MsgTakeOutAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgTakeOutAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTakeOutAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTakeOutAllocationToken proto.InternalMessageInfo

func (m *MsgTakeOutAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTakeOutAllocationToken) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgTakeOutAllocationTokenResponse struct {
}

func (m *MsgTakeOutAllocationTokenResponse) Reset()         { *m = MsgTakeOutAllocationTokenResponse{} }
func (m *MsgTakeOutAllocationTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTakeOutAllocationTokenResponse) ProtoMessage()    {}
func (*MsgTakeOutAllocationTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{3}
}
func (m *MsgTakeOutAllocationTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTakeOutAllocationTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTakeOutAllocationTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTakeOutAllocationTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTakeOutAllocationTokenResponse.Merge(m, src)
}
func (m *MsgTakeOutAllocationTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTakeOutAllocationTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTakeOutAllocationTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTakeOutAllocationTokenResponse proto.InternalMessageInfo

type MsgBuyAllocationToken struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgBuyAllocationToken) Reset()         { *m = MsgBuyAllocationToken{} }
func (m *MsgBuyAllocationToken) String() string { return proto.CompactTextString(m) }
func (*MsgBuyAllocationToken) ProtoMessage()    {}
func (*MsgBuyAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{4}
}
func (m *MsgBuyAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyAllocationToken.Merge(m, src)
}
func (m *MsgBuyAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyAllocationToken proto.InternalMessageInfo

func (m *MsgBuyAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBuyAllocationToken) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgBuyAllocationTokenResponse struct {
}

func (m *MsgBuyAllocationTokenResponse) Reset()         { *m = MsgBuyAllocationTokenResponse{} }
func (m *MsgBuyAllocationTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyAllocationTokenResponse) ProtoMessage()    {}
func (*MsgBuyAllocationTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{5}
}
func (m *MsgBuyAllocationTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyAllocationTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyAllocationTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyAllocationTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyAllocationTokenResponse.Merge(m, src)
}
func (m *MsgBuyAllocationTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyAllocationTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyAllocationTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyAllocationTokenResponse proto.InternalMessageInfo

type MsgSetDepositEndTime struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EndTime uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *MsgSetDepositEndTime) Reset()         { *m = MsgSetDepositEndTime{} }
func (m *MsgSetDepositEndTime) String() string { return proto.CompactTextString(m) }
func (*MsgSetDepositEndTime) ProtoMessage()    {}
func (*MsgSetDepositEndTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{6}
}
func (m *MsgSetDepositEndTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDepositEndTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDepositEndTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDepositEndTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDepositEndTime.Merge(m, src)
}
func (m *MsgSetDepositEndTime) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDepositEndTime) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDepositEndTime.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDepositEndTime proto.InternalMessageInfo

func (m *MsgSetDepositEndTime) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSetDepositEndTime) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type MsgSetDepositEndTimeResponse struct {
}

func (m *MsgSetDepositEndTimeResponse) Reset()         { *m = MsgSetDepositEndTimeResponse{} }
func (m *MsgSetDepositEndTimeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDepositEndTimeResponse) ProtoMessage()    {}
func (*MsgSetDepositEndTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{7}
}
func (m *MsgSetDepositEndTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDepositEndTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDepositEndTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDepositEndTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDepositEndTimeResponse.Merge(m, src)
}
func (m *MsgSetDepositEndTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDepositEndTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDepositEndTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDepositEndTimeResponse proto.InternalMessageInfo

type MsgInitICA struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *MsgInitICA) Reset()         { *m = MsgInitICA{} }
func (m *MsgInitICA) String() string { return proto.CompactTextString(m) }
func (*MsgInitICA) ProtoMessage()    {}
func (*MsgInitICA) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{8}
}
func (m *MsgInitICA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitICA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitICA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitICA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitICA.Merge(m, src)
}
func (m *MsgInitICA) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitICA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitICA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitICA proto.InternalMessageInfo

func (m *MsgInitICA) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgInitICA) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type MsgInitICAResponse struct {
}

func (m *MsgInitICAResponse) Reset()         { *m = MsgInitICAResponse{} }
func (m *MsgInitICAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitICAResponse) ProtoMessage()    {}
func (*MsgInitICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{9}
}
func (m *MsgInitICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitICAResponse.Merge(m, src)
}
func (m *MsgInitICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitICAResponse proto.InternalMessageInfo

type MsgExecTransfer struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TimeoutNanoSecond uint64 `protobuf:"varint,2,opt,name=timeout_nano_second,json=timeoutNanoSecond,proto3" json:"timeout_nano_second,omitempty"`
	TransferChannelId string `protobuf:"bytes,3,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
}

func (m *MsgExecTransfer) Reset()         { *m = MsgExecTransfer{} }
func (m *MsgExecTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgExecTransfer) ProtoMessage()    {}
func (*MsgExecTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{10}
}
func (m *MsgExecTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecTransfer.Merge(m, src)
}
func (m *MsgExecTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecTransfer proto.InternalMessageInfo

func (m *MsgExecTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgExecTransfer) GetTimeoutNanoSecond() uint64 {
	if m != nil {
		return m.TimeoutNanoSecond
	}
	return 0
}

func (m *MsgExecTransfer) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

type MsgExecTransferResponse struct {
}

func (m *MsgExecTransferResponse) Reset()         { *m = MsgExecTransferResponse{} }
func (m *MsgExecTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecTransferResponse) ProtoMessage()    {}
func (*MsgExecTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{11}
}
func (m *MsgExecTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecTransferResponse.Merge(m, src)
}
func (m *MsgExecTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecTransferResponse proto.InternalMessageInfo

type MsgExecAddLiquidity struct {
	Sender string                                                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Msg    github_com_cosmic_horizon_qwoyn_osmosis_balancer.MsgCreateBalancerPool `protobuf:"bytes,2,opt,name=msg,proto3,customtype=github.com/cosmic-horizon/qwoyn/osmosis/balancer.MsgCreateBalancerPool" json:"msg"`
}

func (m *MsgExecAddLiquidity) Reset()         { *m = MsgExecAddLiquidity{} }
func (m *MsgExecAddLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgExecAddLiquidity) ProtoMessage()    {}
func (*MsgExecAddLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{12}
}
func (m *MsgExecAddLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAddLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAddLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAddLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAddLiquidity.Merge(m, src)
}
func (m *MsgExecAddLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAddLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAddLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAddLiquidity proto.InternalMessageInfo

func (m *MsgExecAddLiquidity) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgExecAddLiquidityResponse struct {
}

func (m *MsgExecAddLiquidityResponse) Reset()         { *m = MsgExecAddLiquidityResponse{} }
func (m *MsgExecAddLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecAddLiquidityResponse) ProtoMessage()    {}
func (*MsgExecAddLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{13}
}
func (m *MsgExecAddLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAddLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAddLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAddLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAddLiquidityResponse.Merge(m, src)
}
func (m *MsgExecAddLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAddLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAddLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAddLiquidityResponse proto.InternalMessageInfo

type EventPutAllocationToken struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventPutAllocationToken) Reset()         { *m = EventPutAllocationToken{} }
func (m *EventPutAllocationToken) String() string { return proto.CompactTextString(m) }
func (*EventPutAllocationToken) ProtoMessage()    {}
func (*EventPutAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{14}
}
func (m *EventPutAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPutAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPutAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPutAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPutAllocationToken.Merge(m, src)
}
func (m *EventPutAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *EventPutAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPutAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventPutAllocationToken proto.InternalMessageInfo

func (m *EventPutAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventPutAllocationToken) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventTakeOutAllocationToken struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventTakeOutAllocationToken) Reset()         { *m = EventTakeOutAllocationToken{} }
func (m *EventTakeOutAllocationToken) String() string { return proto.CompactTextString(m) }
func (*EventTakeOutAllocationToken) ProtoMessage()    {}
func (*EventTakeOutAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{15}
}
func (m *EventTakeOutAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTakeOutAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTakeOutAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTakeOutAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTakeOutAllocationToken.Merge(m, src)
}
func (m *EventTakeOutAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *EventTakeOutAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTakeOutAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventTakeOutAllocationToken proto.InternalMessageInfo

func (m *EventTakeOutAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventTakeOutAllocationToken) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventBuyAllocationToken struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventBuyAllocationToken) Reset()         { *m = EventBuyAllocationToken{} }
func (m *EventBuyAllocationToken) String() string { return proto.CompactTextString(m) }
func (*EventBuyAllocationToken) ProtoMessage()    {}
func (*EventBuyAllocationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{16}
}
func (m *EventBuyAllocationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBuyAllocationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBuyAllocationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBuyAllocationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBuyAllocationToken.Merge(m, src)
}
func (m *EventBuyAllocationToken) XXX_Size() int {
	return m.Size()
}
func (m *EventBuyAllocationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBuyAllocationToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventBuyAllocationToken proto.InternalMessageInfo

func (m *EventBuyAllocationToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventBuyAllocationToken) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventSetDepositEndTime struct {
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *EventSetDepositEndTime) Reset()         { *m = EventSetDepositEndTime{} }
func (m *EventSetDepositEndTime) String() string { return proto.CompactTextString(m) }
func (*EventSetDepositEndTime) ProtoMessage()    {}
func (*EventSetDepositEndTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86d5d6b5eea5467, []int{17}
}
func (m *EventSetDepositEndTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetDepositEndTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetDepositEndTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetDepositEndTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetDepositEndTime.Merge(m, src)
}
func (m *EventSetDepositEndTime) XXX_Size() int {
	return m.Size()
}
func (m *EventSetDepositEndTime) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetDepositEndTime.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetDepositEndTime proto.InternalMessageInfo

func (m *EventSetDepositEndTime) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgPutAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.MsgPutAllocationToken")
	proto.RegisterType((*MsgPutAllocationTokenResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgPutAllocationTokenResponse")
	proto.RegisterType((*MsgTakeOutAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.MsgTakeOutAllocationToken")
	proto.RegisterType((*MsgTakeOutAllocationTokenResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgTakeOutAllocationTokenResponse")
	proto.RegisterType((*MsgBuyAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.MsgBuyAllocationToken")
	proto.RegisterType((*MsgBuyAllocationTokenResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgBuyAllocationTokenResponse")
	proto.RegisterType((*MsgSetDepositEndTime)(nil), "cosmichorizon.qwoyn.aquifer.MsgSetDepositEndTime")
	proto.RegisterType((*MsgSetDepositEndTimeResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgSetDepositEndTimeResponse")
	proto.RegisterType((*MsgInitICA)(nil), "cosmichorizon.qwoyn.aquifer.MsgInitICA")
	proto.RegisterType((*MsgInitICAResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgInitICAResponse")
	proto.RegisterType((*MsgExecTransfer)(nil), "cosmichorizon.qwoyn.aquifer.MsgExecTransfer")
	proto.RegisterType((*MsgExecTransferResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgExecTransferResponse")
	proto.RegisterType((*MsgExecAddLiquidity)(nil), "cosmichorizon.qwoyn.aquifer.MsgExecAddLiquidity")
	proto.RegisterType((*MsgExecAddLiquidityResponse)(nil), "cosmichorizon.qwoyn.aquifer.MsgExecAddLiquidityResponse")
	proto.RegisterType((*EventPutAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.EventPutAllocationToken")
	proto.RegisterType((*EventTakeOutAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.EventTakeOutAllocationToken")
	proto.RegisterType((*EventBuyAllocationToken)(nil), "cosmichorizon.qwoyn.aquifer.EventBuyAllocationToken")
	proto.RegisterType((*EventSetDepositEndTime)(nil), "cosmichorizon.qwoyn.aquifer.EventSetDepositEndTime")
}

func init() {
	proto.RegisterFile("cosmichorizon/qwoyn/aquifer/tx.proto", fileDescriptor_d86d5d6b5eea5467)
}

var fileDescriptor_d86d5d6b5eea5467 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x53, 0xd3, 0x40,
	0x14, 0x6f, 0x84, 0x01, 0x79, 0xe2, 0x28, 0x01, 0x0b, 0x0d, 0x12, 0xb0, 0x38, 0x23, 0x07, 0x4c,
	0x04, 0x1d, 0xff, 0x1d, 0x9c, 0xa1, 0x15, 0x67, 0x3a, 0x63, 0x90, 0x29, 0x3d, 0x79, 0xa9, 0x69,
	0xb2, 0xa4, 0x3b, 0xb4, 0xbb, 0x25, 0xbb, 0x41, 0xea, 0xc1, 0x19, 0x47, 0x2f, 0x9e, 0xe4, 0x63,
	0x71, 0xe4, 0xe8, 0x78, 0x60, 0x1c, 0xf8, 0x22, 0x4e, 0x36, 0x69, 0x68, 0x6d, 0x62, 0x88, 0x07,
	0x6e, 0xdb, 0x7d, 0xef, 0xf7, 0xa7, 0x6f, 0xdf, 0x7b, 0x13, 0xb8, 0x6f, 0x51, 0xd6, 0xc6, 0x56,
	0x93, 0xba, 0xf8, 0x13, 0x25, 0xfa, 0xfe, 0x47, 0xda, 0x25, 0xba, 0xb9, 0xef, 0xe1, 0x5d, 0xe4,
	0xea, 0xfc, 0x50, 0xeb, 0xb8, 0x94, 0x53, 0x79, 0x7e, 0x20, 0x4b, 0x13, 0x59, 0x5a, 0x98, 0xa5,
	0xa8, 0x7e, 0x90, 0x32, 0xbd, 0x61, 0x32, 0xa4, 0x1f, 0xac, 0x35, 0x10, 0x37, 0xd7, 0x74, 0x8b,
	0x62, 0x12, 0x80, 0x95, 0x19, 0x87, 0x3a, 0x54, 0x1c, 0x75, 0xff, 0x14, 0xdc, 0x16, 0x9b, 0x70,
	0xc7, 0x60, 0xce, 0xb6, 0xc7, 0x37, 0x5a, 0x2d, 0x6a, 0x99, 0x1c, 0x53, 0x52, 0xa3, 0x7b, 0x88,
	0xc8, 0x79, 0x18, 0x63, 0x88, 0xd8, 0xc8, 0x9d, 0x93, 0x96, 0xa4, 0x95, 0x89, 0x6a, 0xf8, 0x4b,
	0x7e, 0x06, 0x63, 0x66, 0x9b, 0x7a, 0x84, 0xcf, 0x5d, 0x5b, 0x92, 0x56, 0x6e, 0xac, 0x17, 0xb4,
	0x40, 0x57, 0xf3, 0x75, 0xb5, 0x50, 0x57, 0x2b, 0x53, 0x4c, 0x4a, 0xa3, 0xc7, 0xa7, 0x8b, 0xb9,
	0x6a, 0x98, 0x5e, 0x5c, 0x84, 0x85, 0x58, 0xa5, 0x2a, 0x62, 0x1d, 0x4a, 0x18, 0x2a, 0xb6, 0xa0,
	0x60, 0x30, 0xa7, 0x66, 0xee, 0xa1, 0x77, 0x57, 0x60, 0x67, 0x19, 0xee, 0x25, 0xaa, 0x45, 0x96,
	0x82, 0xea, 0x94, 0xbc, 0xee, 0x15, 0x55, 0x67, 0x58, 0x29, 0xb2, 0x52, 0x81, 0x19, 0x83, 0x39,
	0x3b, 0x88, 0xbf, 0x46, 0x1d, 0xca, 0x30, 0xdf, 0x24, 0x76, 0x0d, 0xb7, 0x51, 0xa2, 0x93, 0x02,
	0x5c, 0x47, 0xc4, 0xae, 0x73, 0xdc, 0x46, 0xc2, 0xcb, 0x68, 0x75, 0x1c, 0x05, 0x90, 0xa2, 0x0a,
	0x77, 0xe3, 0xa8, 0xfa, 0xa4, 0xc0, 0x60, 0x4e, 0x85, 0x60, 0x5e, 0x29, 0x6f, 0x24, 0x0a, 0x2c,
	0xc3, 0x4d, 0x8b, 0x12, 0x82, 0x2c, 0xdf, 0x6b, 0x1d, 0xdb, 0x42, 0x65, 0xa2, 0x3a, 0x79, 0x71,
	0x59, 0xb1, 0x8b, 0x33, 0x20, 0x5f, 0x50, 0x45, 0x02, 0xdf, 0x25, 0xb8, 0x65, 0x30, 0x67, 0xf3,
	0x10, 0x59, 0x35, 0xd7, 0x24, 0x6c, 0x17, 0xb9, 0x89, 0x32, 0x1a, 0x4c, 0xfb, 0xff, 0x81, 0x7a,
	0xbc, 0x4e, 0x4c, 0x42, 0xeb, 0x0c, 0x59, 0x94, 0xd8, 0xe1, 0x5f, 0x9a, 0x0a, 0x43, 0x5b, 0x26,
	0xa1, 0x3b, 0x22, 0x20, 0xf2, 0x43, 0xce, 0xba, 0xd5, 0x34, 0x09, 0x41, 0x2d, 0xdf, 0xdc, 0x88,
	0x20, 0x9d, 0xea, 0x85, 0xca, 0x41, 0xa4, 0x62, 0x17, 0x0b, 0x30, 0xfb, 0x97, 0x95, 0xc8, 0xe6,
	0x0f, 0x09, 0xa6, 0xc3, 0xd8, 0x86, 0x6d, 0xbf, 0xc5, 0xfb, 0x1e, 0xb6, 0x31, 0xef, 0x26, 0x5a,
	0xfd, 0x00, 0x23, 0x6d, 0xe6, 0x08, 0x6b, 0x93, 0xa5, 0x2d, 0xff, 0x79, 0x7f, 0x9d, 0x2e, 0xbe,
	0x71, 0x30, 0x6f, 0x7a, 0x0d, 0xcd, 0xa2, 0x6d, 0x3d, 0x18, 0xdf, 0x87, 0x83, 0x53, 0x2e, 0xfa,
	0x03, 0xfb, 0x73, 0xdb, 0x32, 0x89, 0x85, 0x5c, 0xcd, 0x60, 0x4e, 0xd9, 0x45, 0x26, 0x47, 0xa5,
	0xf0, 0x66, 0x9b, 0xd2, 0x56, 0xd5, 0xa7, 0x2e, 0x2e, 0xc0, 0x7c, 0x8c, 0xa1, 0xbe, 0x87, 0x9b,
	0xdd, 0x3c, 0x40, 0x84, 0x67, 0x18, 0xe7, 0xfc, 0x40, 0xc3, 0x4e, 0x44, 0xfd, 0x68, 0xc0, 0xbc,
	0xa0, 0xca, 0x38, 0x8e, 0x49, 0x74, 0x3d, 0x67, 0x19, 0x46, 0x29, 0x89, 0x6a, 0x15, 0xf2, 0x82,
	0x6a, 0x78, 0x14, 0x64, 0x18, 0x15, 0xed, 0x2e, 0x89, 0xde, 0x10, 0xe7, 0xf5, 0xaf, 0xe3, 0x30,
	0x62, 0x30, 0x47, 0xfe, 0x26, 0x81, 0x1c, 0x53, 0x96, 0x75, 0xed, 0x1f, 0x2b, 0x55, 0x8b, 0xdd,
	0x57, 0xca, 0xcb, 0xec, 0x98, 0xde, 0x0b, 0xc9, 0x47, 0x12, 0xe4, 0x13, 0x4a, 0xfa, 0x34, 0x8d,
	0x36, 0x1e, 0xa7, 0xbc, 0xfa, 0x3f, 0x5c, 0x64, 0xc9, 0xaf, 0x4c, 0xcc, 0xb3, 0xa4, 0x56, 0x66,
	0x18, 0x93, 0x5e, 0x99, 0xe4, 0xfd, 0x26, 0x7f, 0x91, 0x60, 0x6a, 0xf8, 0x49, 0xd7, 0xd2, 0x18,
	0x87, 0x20, 0xca, 0x8b, 0xcc, 0x90, 0xc8, 0x83, 0x05, 0xe3, 0xbd, 0xad, 0xf7, 0x20, 0x8d, 0x25,
	0x4c, 0x54, 0xf4, 0x4b, 0x26, 0x46, 0x22, 0x2e, 0x4c, 0x0e, 0x2c, 0xbe, 0xd5, 0x34, 0x82, 0xfe,
	0x6c, 0xe5, 0x49, 0x96, 0xec, 0x48, 0xf3, 0x33, 0xdc, 0x1e, 0xda, 0x62, 0x8f, 0x2e, 0xc3, 0xd4,
	0x8f, 0x50, 0x9e, 0x67, 0x45, 0xf4, 0xf4, 0x4b, 0x95, 0xe3, 0x33, 0x55, 0x3a, 0x39, 0x53, 0xa5,
	0xdf, 0x67, 0xaa, 0x74, 0x74, 0xae, 0xe6, 0x4e, 0xce, 0xd5, 0xdc, 0xcf, 0x73, 0x35, 0xf7, 0x5e,
	0x4f, 0x5b, 0x8f, 0x87, 0x17, 0x9f, 0x41, 0xdd, 0x0e, 0x62, 0x8d, 0x31, 0xf1, 0xdd, 0xf2, 0xf8,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x6f, 0xa5, 0x6a, 0x32, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PutAllocationToken(ctx context.Context, in *MsgPutAllocationToken, opts ...grpc.CallOption) (*MsgPutAllocationTokenResponse, error)
	TakeOutAllocationToken(ctx context.Context, in *MsgTakeOutAllocationToken, opts ...grpc.CallOption) (*MsgTakeOutAllocationTokenResponse, error)
	BuyAllocationToken(ctx context.Context, in *MsgBuyAllocationToken, opts ...grpc.CallOption) (*MsgBuyAllocationTokenResponse, error)
	SetDepositEndTime(ctx context.Context, in *MsgSetDepositEndTime, opts ...grpc.CallOption) (*MsgSetDepositEndTimeResponse, error)
	InitICA(ctx context.Context, in *MsgInitICA, opts ...grpc.CallOption) (*MsgInitICAResponse, error)
	ExecTransfer(ctx context.Context, in *MsgExecTransfer, opts ...grpc.CallOption) (*MsgExecTransferResponse, error)
	ExecAddLiquidity(ctx context.Context, in *MsgExecAddLiquidity, opts ...grpc.CallOption) (*MsgExecAddLiquidityResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PutAllocationToken(ctx context.Context, in *MsgPutAllocationToken, opts ...grpc.CallOption) (*MsgPutAllocationTokenResponse, error) {
	out := new(MsgPutAllocationTokenResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/PutAllocationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TakeOutAllocationToken(ctx context.Context, in *MsgTakeOutAllocationToken, opts ...grpc.CallOption) (*MsgTakeOutAllocationTokenResponse, error) {
	out := new(MsgTakeOutAllocationTokenResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/TakeOutAllocationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyAllocationToken(ctx context.Context, in *MsgBuyAllocationToken, opts ...grpc.CallOption) (*MsgBuyAllocationTokenResponse, error) {
	out := new(MsgBuyAllocationTokenResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/BuyAllocationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDepositEndTime(ctx context.Context, in *MsgSetDepositEndTime, opts ...grpc.CallOption) (*MsgSetDepositEndTimeResponse, error) {
	out := new(MsgSetDepositEndTimeResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/SetDepositEndTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitICA(ctx context.Context, in *MsgInitICA, opts ...grpc.CallOption) (*MsgInitICAResponse, error) {
	out := new(MsgInitICAResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/InitICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecTransfer(ctx context.Context, in *MsgExecTransfer, opts ...grpc.CallOption) (*MsgExecTransferResponse, error) {
	out := new(MsgExecTransferResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/ExecTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecAddLiquidity(ctx context.Context, in *MsgExecAddLiquidity, opts ...grpc.CallOption) (*MsgExecAddLiquidityResponse, error) {
	out := new(MsgExecAddLiquidityResponse)
	err := c.cc.Invoke(ctx, "/cosmichorizon.qwoyn.aquifer.Msg/ExecAddLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PutAllocationToken(context.Context, *MsgPutAllocationToken) (*MsgPutAllocationTokenResponse, error)
	TakeOutAllocationToken(context.Context, *MsgTakeOutAllocationToken) (*MsgTakeOutAllocationTokenResponse, error)
	BuyAllocationToken(context.Context, *MsgBuyAllocationToken) (*MsgBuyAllocationTokenResponse, error)
	SetDepositEndTime(context.Context, *MsgSetDepositEndTime) (*MsgSetDepositEndTimeResponse, error)
	InitICA(context.Context, *MsgInitICA) (*MsgInitICAResponse, error)
	ExecTransfer(context.Context, *MsgExecTransfer) (*MsgExecTransferResponse, error)
	ExecAddLiquidity(context.Context, *MsgExecAddLiquidity) (*MsgExecAddLiquidityResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PutAllocationToken(ctx context.Context, req *MsgPutAllocationToken) (*MsgPutAllocationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAllocationToken not implemented")
}
func (*UnimplementedMsgServer) TakeOutAllocationToken(ctx context.Context, req *MsgTakeOutAllocationToken) (*MsgTakeOutAllocationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeOutAllocationToken not implemented")
}
func (*UnimplementedMsgServer) BuyAllocationToken(ctx context.Context, req *MsgBuyAllocationToken) (*MsgBuyAllocationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAllocationToken not implemented")
}
func (*UnimplementedMsgServer) SetDepositEndTime(ctx context.Context, req *MsgSetDepositEndTime) (*MsgSetDepositEndTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDepositEndTime not implemented")
}
func (*UnimplementedMsgServer) InitICA(ctx context.Context, req *MsgInitICA) (*MsgInitICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitICA not implemented")
}
func (*UnimplementedMsgServer) ExecTransfer(ctx context.Context, req *MsgExecTransfer) (*MsgExecTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTransfer not implemented")
}
func (*UnimplementedMsgServer) ExecAddLiquidity(ctx context.Context, req *MsgExecAddLiquidity) (*MsgExecAddLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAddLiquidity not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PutAllocationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPutAllocationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PutAllocationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/PutAllocationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PutAllocationToken(ctx, req.(*MsgPutAllocationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TakeOutAllocationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTakeOutAllocationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TakeOutAllocationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/TakeOutAllocationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TakeOutAllocationToken(ctx, req.(*MsgTakeOutAllocationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyAllocationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyAllocationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyAllocationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/BuyAllocationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyAllocationToken(ctx, req.(*MsgBuyAllocationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDepositEndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDepositEndTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDepositEndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/SetDepositEndTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDepositEndTime(ctx, req.(*MsgSetDepositEndTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitICA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/InitICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitICA(ctx, req.(*MsgInitICA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/ExecTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecTransfer(ctx, req.(*MsgExecTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecAddLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecAddLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecAddLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmichorizon.qwoyn.aquifer.Msg/ExecAddLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecAddLiquidity(ctx, req.(*MsgExecAddLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmichorizon.qwoyn.aquifer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutAllocationToken",
			Handler:    _Msg_PutAllocationToken_Handler,
		},
		{
			MethodName: "TakeOutAllocationToken",
			Handler:    _Msg_TakeOutAllocationToken_Handler,
		},
		{
			MethodName: "BuyAllocationToken",
			Handler:    _Msg_BuyAllocationToken_Handler,
		},
		{
			MethodName: "SetDepositEndTime",
			Handler:    _Msg_SetDepositEndTime_Handler,
		},
		{
			MethodName: "InitICA",
			Handler:    _Msg_InitICA_Handler,
		},
		{
			MethodName: "ExecTransfer",
			Handler:    _Msg_ExecTransfer_Handler,
		},
		{
			MethodName: "ExecAddLiquidity",
			Handler:    _Msg_ExecAddLiquidity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmichorizon/qwoyn/aquifer/tx.proto",
}

func (m *MsgPutAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPutAllocationTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutAllocationTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutAllocationTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTakeOutAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTakeOutAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTakeOutAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTakeOutAllocationTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTakeOutAllocationTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTakeOutAllocationTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyAllocationTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyAllocationTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyAllocationTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetDepositEndTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDepositEndTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDepositEndTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDepositEndTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDepositEndTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDepositEndTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitICA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitICA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitICA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TimeoutNanoSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutNanoSecond))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecAddLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAddLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAddLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Msg.Size()
		i -= size
		if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecAddLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAddLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAddLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventPutAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPutAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPutAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTakeOutAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTakeOutAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTakeOutAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBuyAllocationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBuyAllocationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBuyAllocationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSetDepositEndTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetDepositEndTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetDepositEndTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPutAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPutAllocationTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTakeOutAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTakeOutAllocationTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBuyAllocationTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetDepositEndTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovTx(uint64(m.EndTime))
	}
	return n
}

func (m *MsgSetDepositEndTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitICA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutNanoSecond != 0 {
		n += 1 + sovTx(uint64(m.TimeoutNanoSecond))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecAddLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Msg.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExecAddLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventPutAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EventTakeOutAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EventBuyAllocationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EventSetDepositEndTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTx(uint64(m.Time))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPutAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutAllocationTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutAllocationTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutAllocationTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTakeOutAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTakeOutAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTakeOutAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTakeOutAllocationTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTakeOutAllocationTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTakeOutAllocationTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyAllocationTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyAllocationTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyAllocationTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDepositEndTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDepositEndTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDepositEndTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDepositEndTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDepositEndTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDepositEndTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitICA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitICA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitICA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutNanoSecond", wireType)
			}
			m.TimeoutNanoSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutNanoSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAddLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAddLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAddLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAddLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAddLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAddLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPutAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPutAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPutAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTakeOutAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTakeOutAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTakeOutAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBuyAllocationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBuyAllocationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBuyAllocationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetDepositEndTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetDepositEndTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetDepositEndTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
