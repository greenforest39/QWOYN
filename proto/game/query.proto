syntax = "proto3";
package cosmichorizon.coho.game;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "game/params.proto";
import "game/game.proto";
import "game/liquidity.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/cosmic-horizon/coho/x/game/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/params";
  }
  rpc WhitelistedContracts(QueryWhitelistedContractsRequest) returns (QueryWhitelistedContractsResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/whitelisted_contracts";
  }
  rpc InGameNfts(QueryInGameNftsRequest) returns (QueryInGameNftsResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/in_game_nfts/{contract}";
  }
  rpc DepositBalance(QueryDepositBalanceRequest) returns (QueryDepositBalanceResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/deposit_balance/{address}";
  }
  rpc AllDepositBalance(QueryAllDepositBalancesRequest) returns (QueryAllDepositBalanceResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/all_deposit_balances";
  }
  rpc AllUnbondings(QueryAllUnbondingsRequest) returns (QueryAllUnbondingsResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/all_unbondings";
  }
  rpc UserUnbondings(QueryUserUnbondingsRequest) returns (QueryUserUnbondingsResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/user_unbondings/{address}";
  }
  rpc Liquidity(QueryLiquidityRequest) returns (QueryLiquidityResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/liquidity";
  }
  rpc EstimatedSwapResult(QueryEstimatedSwapResultRequest) returns (QueryEstimatedSwapResultResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/estimated_swap_result/{amount}";
  }
  rpc SwapRate(QuerySwapRateRequest) returns (QuerySwapRateResponse) {
    option (google.api.http).get = "/cosmichorizon/coho/game/swap_rate";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryWhitelistedContractsRequest {}
message QueryWhitelistedContractsResponse {
  repeated string contracts = 1;
}

message QueryInGameNftsRequest {
  string contract = 1;
}
message QueryInGameNftsResponse {
  repeated uint64 token_ids = 1;
}

message QueryDepositBalanceRequest { string address = 1; }
message QueryDepositBalanceResponse {
  Deposit deposit = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllDepositBalancesRequest {}
message QueryAllDepositBalanceResponse {
  repeated Deposit deposits = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
}

message QueryAllUnbondingsRequest {}
message QueryAllUnbondingsResponse {
  repeated Unbonding unbondings = 1 [ (gogoproto.nullable) = false ];
}

message QueryUserUnbondingsRequest {
  string address = 1; 
}
message QueryUserUnbondingsResponse {
  repeated Unbonding unbondings = 1 [ (gogoproto.nullable) = false ];
}

message QueryLiquidityRequest {}
message QueryLiquidityResponse {
  Liquidity liquidity = 1 [ (gogoproto.nullable) = false ];
}

message QueryEstimatedSwapResultRequest {
  string amount = 1;
}
message QueryEstimatedSwapResultResponse {
  cosmos.base.v1beta1.Coin amount = 1 [ (gogoproto.nullable) = false ];
}

message QuerySwapRateRequest {}
message QuerySwapRateResponse {
  string rate = 1 [
    (gogoproto.moretags) = "yaml:\"rate\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
